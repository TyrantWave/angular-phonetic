{"version":3,"sources":["webpack:///C:/Users/tyran/Programs/angular-phonetic/dist/angular-phonetic/fesm5/angular-phonetic.js","webpack:///./src/app/app.component.html","webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA2D;;AAE3D;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,mFAAmF,MAAM,YAAY,UAAU,WAAW,OAAO;AACjI,iBAAiB;AACjB;AACA;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE2D;AAC3D;;;;;;;;;;;;ACjFA,sNAAsN,mCAAmC,YAAY,gBAAgB,kZAAkZ,kDAAkD,OAAO,gBAAgB,6MAA6M,gDAAgD,OAAO,gBAAgB,sNAAsN,qDAAqD,MAAM,gBAAgB,4B;;;;;;;;;;;ACAryC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;ACZA,+DAA+D,+J;;;;;;;;;;;;;;;;;ACArB;AAO1C;IALA;QAME,UAAK,GAAG,SAAS,CAAC;IACpB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,2IAAmC;;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEuB;AAEjB;AACU;AAczD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,sEAAqB;gBACrB,6EAAqB;aACtB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACpBtB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main-es5.js","sourcesContent":["import { Component, Input, NgModule } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar AngularPhoneticComponent = /** @class */ (function () {\r\n    function AngularPhoneticComponent() {\r\n        this.brackets = '()';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    AngularPhoneticComponent.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var parsed = this.parseBrackets();\r\n        this.left = parsed[0];\r\n        this.right = parsed[1];\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    AngularPhoneticComponent.prototype.parseBrackets = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        switch (this.brackets.length) {\r\n            case 0:\r\n                return ['', ''];\r\n            case 1:\r\n                return [this.brackets, this.brackets];\r\n            default:\r\n                return [this.brackets[0], this.brackets[1]];\r\n        }\r\n    };\r\n    AngularPhoneticComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ng-phonetic',\r\n                    template: \"\\n    <ruby>\\n      <ng-content></ng-content> <rp>{{left}}</rp> <rt>{{phonetic}}</rt><rp>{{right}}</rp>\\n    </ruby>\\n  \"\r\n                }] }\r\n    ];\r\n    AngularPhoneticComponent.propDecorators = {\r\n        phonetic: [{ type: Input }],\r\n        brackets: [{ type: Input }]\r\n    };\r\n    return AngularPhoneticComponent;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar AngularPhoneticModule = /** @class */ (function () {\r\n    function AngularPhoneticModule() {\r\n    }\r\n    AngularPhoneticModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    declarations: [AngularPhoneticComponent],\r\n                    imports: [],\r\n                    exports: [AngularPhoneticComponent]\r\n                },] }\r\n    ];\r\n    return AngularPhoneticModule;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { AngularPhoneticComponent, AngularPhoneticModule };\n//# sourceMappingURL=angular-phonetic.js.map\n","module.exports = \"<div style=\\\"text-align:center\\\">\\r\\n  <h1>\\r\\n    Angular <ng-phonetic phonetic=\\\"フォネチック\\\">Phonetic</ng-phonetic>\\r\\n  </h1>\\r\\n  <pre>\\r\\n    <code class=\\\"language-html\\\" pCode>\\r\\nAngular &lt;ng-phonetic phonetic=\\\"フォネチック\\\"&gt;Phonetic&lt;/ng-phonetic&gt;\\r\\n    </code>\\r\\n  </pre>\\r\\n  <h2>A simple component to easily render ruby text.</h2>\\r\\n</div>\\r\\n<hr>\\r\\n<p>Additionally, if the browser doesn't support <em>ruby text</em>, you can specify the brackets used in the fallback:</p>\\r\\n<p>\\r\\n  Specifying both brackets: <ng-phonetic phonetic=\\\"にほんご\\\" brackets=\\\"「」\\\">日本語</ng-phonetic>\\r\\n</p>\\r\\n<pre>\\r\\n  <code class=\\\"language-html\\\" pCode>\\r\\n&lt;ng-phonetic phonetic=\\\"にほんご\\\" brackets=\\\"「」\\\" &gt;日本語&lt;/ng-phonetic&gt;\\r\\n  </code>\\r\\n</pre>\\r\\n<br />\\r\\n<p>\\r\\n  Using the same bracket twice: <ng-phonetic phonetic=\\\"조선적\\\" brackets=\\\"|\\\">朝鮮的</ng-phonetic>\\r\\n</p>\\r\\n<pre>\\r\\n  <code class=\\\"language-html\\\" pCode>\\r\\n&lt;ng-phonetic phonetic=\\\"조선적\\\" brackets=\\\"|\\\" &gt;朝鮮的&lt;/ng-phonetic&gt;\\r\\n  </code>\\r\\n</pre>\\r\\n<br />\\r\\n<p>\\r\\n  Can also strip out the brackets: <ng-phonetic phonetic=\\\"zhōng wén\\\" brackets=\\\"\\\">中文</ng-phonetic>\\r\\n</p>\\r\\n<pre>\\r\\n  <code class=\\\"language-html\\\" pCode>\\r\\n  &lt;ng-phonetic phonetic=\\\"zhōng wén\\\" brackets=\\\"\\\" &gt;中文&lt;/ng-phonetic&gt;\\r\\n  </code>\\r\\n</pre>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuLi8uLi9wcm9qZWN0cy9leGFtcGxlL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'example';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AngularPhoneticModule } from 'angular-phonetic';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AngularPhoneticModule,\r\n    CodeHighlighterModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}